assign [app_id="org.telegram.desktop"] workspace 5
assign [app_id="firefox"] workspace 1

exec setwall
exec 'sudo ~/kanata/target/release/kanata -c ~/.config/keyboard/hands.kbd'
exec telegram-desktop
exec firefox
exec --no-startup-id mako
exec 'wl-paste -t text --watch clipman store'

set $mod Mod4
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
set $term wezterm
# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
set $menu wofi --show drun

#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# Example configuration:
#
exec swayidle -w \
         timeout 300 'swaylock -f -c 000000' \
         timeout 600 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \
         before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

### Key bindings
#
# Basics:
#
# Start a terminal
         bindsym $mod+Return exec $term

         bindsym $mod+Slash focus next

# Kill focused window
         bindsym $mod+q kill

# Start your launcher
         bindsym $mod+d exec $menu

# Drag floating windows by holding down $mod and left mouse button.
# Resize them with right mouse button + $mod.
# Despite the name, also works for non-floating windows.
# Change normal to inverse to use left mouse button for resizing and right
# mouse button for dragging.
         floating_modifier $mod normal

# Reload the configuration file
         bindsym $mod+Shift+c reload

# Exit sway (logs you out of your Wayland session)
         bindsym $mod+Shift+q exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
#
# Moving around:
#
# Move your focus around
# Or use $mod+[up|down|left|right]
         bindsym $mod+Left focus left
         bindsym $mod+Down focus down
         bindsym $mod+Up focus up
         bindsym $mod+Right focus right

# Move the focused window with the same, but add Shift
# Ditto, with arrow keys
         bindsym $mod+Shift+Left move left
         bindsym $mod+Shift+Down move down
         bindsym $mod+Shift+Up move up
         bindsym $mod+Shift+Right move right
#
# Workspaces:
#
# Switch to workspace
         bindsym $mod+a workspace number 1
         bindsym $mod+e workspace number 2
         bindsym $mod+i workspace number 3
         bindsym $mod+h workspace number 4
         bindsym $mod+t workspace number 5

         bindsym $mod+Shift+a move container to workspace number 1
         bindsym $mod+Shift+e move container to workspace number 2
         bindsym $mod+Shift+i move container to workspace number 3
         bindsym $mod+Shift+h move container to workspace number 4
         bindsym $mod+Shift+t move container to workspace number 5
         gaps inner 10
         smart_gaps on
#
# Layout stuff:
#
# You can "split" the current object of your focus with
# $mod+b or $mod+v, for horizontal and vertical splits
# respectively.
         bindsym $mod+b splith
         bindsym $mod+v splitv

# Switch the current container between different layout styles

# Make the current focus fullscreen
         bindsym $mod+f fullscreen

# Toggle the current focus between tiling and floating mode
         #bindsym $mod+Shift+space floating toggle

# Swap focus between the tiling area and the floating area
         #bindsym $mod+Shift+space focus mode_toggle

# Move focus to the parent container
# bindsym $mod+a focus parent
#
# Scratchpad:
#
# Sway has a "scratchpad", which is a bag of holding for windows.
# You can send windows there and get them back later.

# Move the currently focused window to the scratchpad
         bindsym $mod+Shift+Space move scratchpad

# Show the next scratchpad window or hide the focused scratchpad window.
# If there are multiple scratchpad windows, this command cycles through them.
         bindsym $mod+Space scratchpad show
#
# Resizing containers:
#
         default_border pixel 2
         mode "resize" {
# left will shrink the containers width
# right will grow the containers width
# up will shrink the containers height
# down will grow the containers height
             bindsym $left resize shrink width 10px
                 bindsym $down resize grow height 10px
                 bindsym $up resize shrink height 10px
                 bindsym $right resize grow width 10px

# Ditto, with arrow keys
                 bindsym Left resize shrink width 10px
                 bindsym Down resize grow height 10px
                 bindsym Up resize shrink height 10px
                 bindsym Right resize grow width 10px

# Return to default mode
                 bindsym Return mode "default"
                 bindsym Escape mode "default"
         }
bindsym $mod+r mode "resize"

# Sreen brightness controls
bindsym $mod+s exec 'grim - | wl-copy'
bindsym XF86MonBrightnessUp   exec light -A 10
bindsym XF86MonBrightnessDown exec light -U 10

bar  {
    swaybar_command waybar
        position bottom
}

set $cl_high #009ddc
set $cl_indi #d9d8d8
set $cl_back #231f20
set $cl_fore #d9d8d8
set $cl_urge #ee2e24

# Colors                border   bg       text     indi     childborder
client.focused          $cl_high $cl_high $cl_fore $cl_indi $cl_high
client.focused_inactive $cl_back $cl_back $cl_fore $cl_back $cl_back
client.unfocused        $cl_back $cl_back $cl_fore $cl_back $cl_back
client.urgent           $cl_urge $cl_urge $cl_fore $cl_urge $cl_urge

# Reload the bar
exec_always 'killall -SIGUSR2 waybar'
